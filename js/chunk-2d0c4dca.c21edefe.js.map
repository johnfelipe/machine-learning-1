{"version":3,"sources":["webpack:///./src/templates/tensorflow-handwritten-digit-cnn.js"],"names":["module","exports","index","type","title","description","data","remoteFile","input_ref","spriteWidth","spriteHeight","labelSize","sampleSplit","shuffle","trainingRatio","evaluationRatio","inputShapeLength","inputShape","outputShapeLength","outputShape","layerSize","layerName","units","kernelSize","filters","strides","poolSize","activation","kernelInitializer","biasInitializer","epochs","batchSize","validationSplit","compilerOptimizerSelected","compilerLossSelected"],"mappings":"mGAAAA,EAAOC,QAAU,CACf,CACEC,MAAO,aACPC,KAAM,gBACNC,MAAO,iBACPC,YACE,mRAGFC,KAAM,CACJC,WAAY,+EAGhB,CACEL,MAAO,aACPM,UAAW,aACXH,YAAa,8EACbF,KAAM,sBACNG,KAAM,CACJG,YAAa,GACbC,aAAc,KAGlB,CACER,MAAO,aACPC,KAAM,gBACNE,YACE,mgBAMFC,KAAM,CACJC,WAAY,iFAGhB,CACEL,MAAO,aACPM,UAAW,aACXH,YACE,yLAEFF,KAAM,eACNG,KAAM,CACJK,UAAW,KAGf,CACET,MAAO,aACPC,KAAM,kBACNC,MAAO,mBACPC,YACE,8VAKFC,KAAM,CACJM,YAAa,GACbC,SAAS,EACTC,cAAe,GACfC,gBAAiB,GACjBC,iBAAkB,EAClBC,WAAY,CAAC,GAAI,GAAI,GACrBC,kBAAmB,EACnBC,YAAa,CAAC,MAGlB,CACEjB,MAAO,aACPM,UAAW,aACXL,KAAM,iBACNC,MAAO,gCACPC,YACE,+IAEFC,KAAM,CACJc,UAAW,EACXC,UAAW,CAAC,SAAU,eAAgB,SAAU,eAAgB,UAAW,SAC3EC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IACvBC,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5BC,QAAS,CAAC,GAAI,EAAG,IAAK,GAAI,EAAG,IAC7BC,QAAS,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,IACxCC,SAAU,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,CAAC,EAAG,GAAI,GAAI,IACvCC,WAAY,CAAC,OAAQ,KAAM,OAAQ,KAAM,KAAM,WAC/CC,kBAAmB,CAAC,kBAAmB,KAAM,kBAAmB,KAAM,KAAM,mBAC5EC,gBAAiB,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,WAGnE,CACE3B,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,kBACPC,YACE,qtBASFC,KAAM,CACJwB,OAAQ,GACRC,UAAW,IACXlB,SAAS,EACTmB,gBAAiB,IACjBC,0BAA2B,SAC3BC,qBAAsB,4BAG1B,CACEhC,MAAO,aACPM,UAAW,aACXL,KAAM,mBACNC,MAAO,qBACPC,YACE,+MAGFC,KAAM,CACJc,UAAW","file":"js/chunk-2d0c4dca.c21edefe.js","sourcesContent":["module.exports = [\n  {\n    index: 'pipeline_0',\n    type: 'DatasetLoader',\n    title: 'Dataset Loader',\n    description:\n      'This pipeline is based on the tutorial from tensorflow about [convolutional neural network]' +\n      '(https://www.tensorflow.org/js/tutorials/training/handwritten_digit_cnn). The datas source' +\n      'below is a **PNG** image of **1** channel (greyscale) with the size of **784** x **65000**.',\n    data: {\n      remoteFile: 'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png'\n    }\n  },\n  {\n    index: 'pipeline_1',\n    input_ref: 'pipeline_0',\n    description: 'The image contains **65000** digits, each with the size of **28** x **28**.',\n    type: 'DatasetSpriteViewer',\n    data: {\n      spriteWidth: 28,\n      spriteHeight: 28\n    }\n  },\n  {\n    index: 'pipeline_2',\n    type: 'DatasetLoader',\n    description:\n      'The next datasource is the **labels** and they are represented as an array of **10** zeroes or ' +\n      'ones. In the array, if the digit is a zero, then the first number in the array will be one, if ' +\n      \"its a one, then the second number will be a one and so on... It's like turning on and off the \" +\n      'numbers of the array, so the **neural network** should be able to turn one of its **10** ' +\n      'outputs (as its a classifier) to represent a digit. There are 65000 **groups** of 10 numbers ' +\n      'describing the digits in the image from above.',\n    data: {\n      remoteFile: 'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8'\n    }\n  },\n  {\n    index: 'pipeline_3',\n    input_ref: 'pipeline_2',\n    description:\n      'We define **10** numbers to represent a **label** (as there are 10 possible digits), and then ' +\n      'we **reference** the output of pipeline 1, so it will have this information added to it.',\n    type: 'DatasetLabel',\n    data: {\n      labelSize: 10\n    }\n  },\n  {\n    index: 'pipeline_4',\n    type: 'DatasetSplitter',\n    title: 'Dataset Splitter',\n    description:\n      'Because javascript has limitations regarding the total memory it may use, the complete ' +\n      'datasource will not be loaded in the pipeline. To run this CNN only **10%** of the total ' +\n      'dataset will be selected and ' +\n      'shuffled. With **65000** digits in the example, only **6500** will be used and split between ' +\n      'training (**70%**) and evaluation (**30%**) sets.',\n    data: {\n      sampleSplit: 0.1,\n      shuffle: true,\n      trainingRatio: 0.7,\n      evaluationRatio: 0.3,\n      inputShapeLength: 3,\n      inputShape: [28, 28, 1],\n      outputShapeLength: 1,\n      outputShape: [10]\n    }\n  },\n  {\n    index: 'pipeline_5',\n    input_ref: 'pipeline_4',\n    type: 'TSModelBuilder',\n    title: 'Define the model architecture',\n    description:\n      \"This is how the neural network is defined, it's important to have the last layer with **10**, \" +\n      'units as each unit will categorize the digits.',\n    data: {\n      layerSize: 6,\n      layerName: ['conv2d', 'maxPooling2d', 'conv2d', 'maxPooling2d', 'flatten', 'dense'],\n      units: [0, 0, 0, 0, 0, 10],\n      kernelSize: [5, 0, 5, 0, 0, 0],\n      filters: [8, -1, 16, -1, -1, 10],\n      strides: [[1], [2, 2], [1], [2, 2], [], []],\n      poolSize: [[], [2, 2], [], [2, 2], [], []],\n      activation: ['relu', '--', 'relu', '--', '--', 'softmax'],\n      kernelInitializer: ['varianceScaling', '--', 'varianceScaling', '--', '--', 'varianceScaling'],\n      biasInitializer: ['zeros', 'zeros', 'zeros', 'zeros', 'zeros', 'zeros']\n    }\n  },\n  {\n    index: 'pipeline_6',\n    input_ref: 'pipeline_5',\n    type: 'TSModelCompiler',\n    title: 'Train the Model',\n    description:\n      'The training uses 4550 digits, having 15% of those digits as ' +\n      '**validation** to prevent overfitting. So the training size will be 3868 and the validation ' +\n      'size will be 682. **Shuffling** is turned on, as most of the digits are ordered in ' +\n      'sequence and have the same handwriting. It takes a **long** time to train in the broser, this ' +\n      'example should have tensorflow running in a backend because running entirely in the browser is ' +\n      'quite **slow**.\\n\\nThe backend runs with the package **@tensorflow/tfjs-node**, you can ' +\n      'set it up in your own machine and use the **GPU** if you have **Linux**. My machine cannot not ' +\n      'run this example in javascript in the browser, but with **C++** bindings it completes ' +\n      'the training and evaluation.',\n    data: {\n      epochs: 10,\n      batchSize: 512,\n      shuffle: true,\n      validationSplit: 0.15,\n      compilerOptimizerSelected: 'adamax',\n      compilerLossSelected: 'categoricalCrossentropy'\n    }\n  },\n  {\n    index: 'pipeline_7',\n    input_ref: 'pipeline_6',\n    type: 'TSModelPredictor',\n    title: 'Evaluate our model',\n    description:\n      'The remaining 1950 digits from the sample are used to evaluate the model. ' +\n      'All six layers will be used to validate the CNN, the last layer (output) should classify the ' +\n      'digit if the training was successful.',\n    data: {\n      layerSize: 6\n    }\n  }\n]\n"],"sourceRoot":""}