{"version":3,"sources":["webpack:///./src/templates/tensorflow-predictions-more-2d.js"],"names":["module","exports","index","type","title","description","data","remoteFile","input_ref","xAxis","yAxis","headers","key","label","checked","state","indexStart","indexEnd","indexLabel","inputShape","layerSize","layerUnits","activationSelected","kernelInitializerSelected","biasInitializerSelected","epochSize","batchSize","validationSpit","shuffle","inputUnits","inputUnitsNormalize","outputUnits","outputUnitsNormalize","compilerOptimizerSelected","compilerLossSelected"],"mappings":"mGAAAA,EAAOC,QAAU,CACf,CACEC,MAAO,aACPC,KAAM,gBACNC,MAAO,4CACPC,YAAa,yLAGbC,KAAM,CACJC,WAAY,gEAGhB,CACEL,MAAO,aACPC,KAAM,qBACNK,UAAW,aACXF,KAAM,CACJG,MAAO,EACPC,MAAO,EACPC,QAAS,CAAC,CACRC,IAAK,OACLC,MAAO,OACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,mBACLC,MAAO,mBACPC,QAAS,mBACTC,MAAO,GAET,CACEH,IAAK,YACLC,MAAO,YACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,eACLC,MAAO,eACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,aACLC,MAAO,aACPC,QAAS,aACTC,MAAO,GAET,CACEH,IAAK,gBACLC,MAAO,gBACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,eACLC,MAAO,eACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,OACLC,MAAO,OACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,SACLC,MAAO,SACPC,SAAS,EACTC,MAAO,MAIb,CACEb,MAAO,aACPC,KAAM,UACNC,MAAO,gCACPI,UAAW,aACXF,KAAM,CACJU,WAAY,EACZC,SAAU,EACVC,YAAa,EACbC,WAAY,EACZC,UAAW,EACXC,WAAY,CAAC,GAAI,GAAI,GACrBC,mBAAoB,CAAC,SAAU,SAAU,WACzCC,0BAA2B,CAAC,GAAI,GAAI,IACpCC,wBAAyB,CAAC,QAAS,QAAS,WAGhD,CACEtB,MAAO,aACPC,KAAM,kBACNC,MAAO,kBACPC,YAAa,sRAIbG,UAAW,aACXF,KAAM,CACJmB,UAAW,GACXC,UAAW,GACXC,eAAgB,GAChBC,SAAS,EACTC,WAAY,CACV,CACEjB,IAAK,EACLE,SAAS,EACTD,MAAO,YAET,CACED,IAAK,EACLE,SAAS,EACTD,MAAO,aAGXiB,qBAAqB,EACrBC,YAAa,CACX,CACEnB,IAAK,EACLE,SAAS,EACTD,MAAO,YAET,CACED,IAAK,EACLE,SAAS,EACTD,MAAO,aAGXmB,sBAAsB,EACtBC,0BAA2B,SAC3BC,qBAAsB,qBAG1B,CACEhC,MAAO,aACPC,KAAM,mBACNC,MAAO,mBACPI,UAAW,aACXF,KAAM,CACJc,UAAW,IAGf,CACElB,MAAO,aACPC,KAAM,qBACNK,UAAW,aACXF,KAAM,CACJG,MAAO,EACPC,MAAO","file":"js/chunk-2d0d681b.f367d197.js","sourcesContent":["module.exports = [\n  {\n    index: 'pipeline_0',\n    type: 'DatasetLoader',\n    title: 'Load, format and visualize the input data',\n    description: 'This pipeline is based on the tutorial from tensorflow about ' +\n      '[linear regression](https://www.tensorflow.org/js/tutorials/training/linear_regression), ' +\n      'with an additional hidden layer.',\n    data: {\n      remoteFile: 'https://storage.googleapis.com/tfjs-tutorials/carsData.json'\n    }\n  },\n  {\n    index: 'pipeline_1',\n    type: 'DatasetTableViewer',\n    input_ref: 'pipeline_0',\n    data: {\n      xAxis: 1,\n      yAxis: 0,\n      headers: [{\n        key: 'Name',\n        label: 'Name',\n        checked: false,\n        state: 0\n      },\n      {\n        key: 'Miles_per_Gallon',\n        label: 'Miles per Gallon',\n        checked: 'Miles_per_Gallon',\n        state: 1\n      },\n      {\n        key: 'Cylinders',\n        label: 'Cylinders',\n        checked: false,\n        state: 0\n      },\n      {\n        key: 'Displacement',\n        label: 'Displacement',\n        checked: false,\n        state: 0\n      },\n      {\n        key: 'Horsepower',\n        label: 'Horsepower',\n        checked: 'Horsepower',\n        state: 1\n      },\n      {\n        key: 'Weight_in_lbs',\n        label: 'Weight in lbs',\n        checked: false,\n        state: 0\n      },\n      {\n        key: 'Acceleration',\n        label: 'Acceleration',\n        checked: false,\n        state: 0\n      },\n      {\n        key: 'Year',\n        label: 'Year',\n        checked: false,\n        state: 0\n      },\n      {\n        key: 'Origin',\n        label: 'Origin',\n        checked: false,\n        state: 0\n      }]\n    }\n  },\n  {\n    index: 'pipeline_2',\n    type: 'TSModel',\n    title: 'Define the model architecture',\n    input_ref: 'pipeline_1',\n    data: {\n      indexStart: 0,\n      indexEnd: 1,\n      indexLabel: -1,\n      inputShape: 1,\n      layerSize: 3,\n      layerUnits: [20, 15, 1],\n      activationSelected: ['linear', 'linear', 'sigmoid'],\n      kernelInitializerSelected: ['', '', ''],\n      biasInitializerSelected: ['zeros', 'zeros', 'zeros']\n    }\n  },\n  {\n    index: 'pipeline_3',\n    type: 'TSModelCompiler',\n    title: 'Train the model',\n    description: 'If the loss value is still **too high** you can re-train the model. It will not ' +\n      'reset the previous training, but resume it with additional epochs. This helps if ' +\n      'the selected training model was good, but the epochs for the training was too low. Just be ' +\n      'careful not to overfit.',\n    input_ref: 'pipeline_2',\n    data: {\n      epochSize: 30,\n      batchSize: 32,\n      validationSpit: 0.5,\n      shuffle: true,\n      inputUnits: [\n        {\n          key: 0,\n          checked: false,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: true,\n          label: 'Column 1'\n        }\n      ],\n      inputUnitsNormalize: true,\n      outputUnits: [\n        {\n          key: 0,\n          checked: true,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: false,\n          label: 'Column 1'\n        }\n      ],\n      outputUnitsNormalize: true,\n      compilerOptimizerSelected: 'adamax',\n      compilerLossSelected: 'meanSquaredError'\n    }\n  },\n  {\n    index: 'pipeline_4',\n    type: 'TSModelPredictor',\n    title: 'Make Predictions',\n    input_ref: 'pipeline_3',\n    data: {\n      layerSize: 3\n    }\n  },\n  {\n    index: 'pipeline_5',\n    type: 'DatasetTableViewer',\n    input_ref: 'pipeline_4',\n    data: {\n      xAxis: 0,\n      yAxis: 1\n    }\n  }\n]\n"],"sourceRoot":""}