{"version":3,"sources":["webpack:///./src/templates/tensorflow-flower-classification-autoencoder.js"],"names":["module","exports","index","type","title","description","data","remoteFile","input_ref","header","xAxis","yAxis","zAxis","lAxis","sampleSplit","shuffle","trainingRatio","evaluationRatio","inputUnits","key","checked","label","outputUnits","indexLabel","layerSize","units","activation","kernelInitializer","biasInitializer","epochs","batchSize","validationSplit","inputUnitsNormalize","outputUnitsNormalize","compilerOptimizerSelected","compilerLossSelected","columns","state"],"mappings":"mGAAAA,EAAOC,QAAU,CACf,CACEC,MAAO,aACPC,KAAM,gBACNC,MAAO,iBACPC,YACE,8RAIFC,KAAM,CACJC,WAAY,0FAGhB,CACEL,MAAO,aACPM,UAAW,aACXL,KAAM,qBACNG,KAAM,CACJG,QAAQ,EACRC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,MAAO,IAGX,CACEX,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,mBACPE,KAAM,CACJQ,YAAa,EACbC,SAAS,EACTC,cAAe,EACfC,gBAAiB,EACjBC,WAAY,CACV,CACEC,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,aAGXC,YAAa,CACX,CACEH,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,aAGXE,WAAY,IAGhB,CACErB,MAAO,aACPM,UAAW,aACXL,KAAM,iBACNC,MAAO,oBACPC,YACE,2GAEFC,KAAM,CACJkB,UAAW,EACXC,MAAO,CAAC,EAAG,GACXC,WAAY,CAAC,OAAQ,QACrBC,kBAAmB,CAAC,eAAgB,gBACpCC,gBAAiB,CAAC,OAAQ,UAG9B,CACE1B,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNE,YACE,6JAEFC,KAAM,CACJuB,OAAQ,IACRC,UAAW,GACXC,gBAAiB,GACjBhB,SAAS,EACTiB,qBAAqB,EACrBC,sBAAsB,EACtBC,0BAA2B,MAC3BC,qBAAsB,qBAG1B,CACEjC,MAAO,aACPM,UAAW,aACXL,KAAM,mBACNC,MAAO,8BACPC,YACE,6XAKFC,KAAM,CACJkB,UAAW,IAGf,CACEtB,MAAO,aACPM,UAAW,aACXL,KAAM,qBACNG,KAAM,CACJI,MAAO,EACPC,MAAO,EACPC,MAAO,GACPC,MAAO,KAGX,CACEX,MAAO,aACPM,UAAW,aACXL,KAAM,qBACNG,KAAM,CACJI,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPuB,QAAS,CACP,CACEjB,IAAK,WACLE,MAAO,WACPD,SAAS,EACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,SAAS,EACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,SAAS,EACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,SAAS,EACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,SAAS,EACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,SAAS,EACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,SAAS,EACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,SAAS,EACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,QAAS,WACTiB,MAAO,GAET,CACElB,IAAK,WACLE,MAAO,WACPD,QAAS,WACTiB,MAAO,GAET,CACElB,IAAK,YACLE,MAAO,YACPD,QAAS,YACTiB,MAAO,GAET,CACElB,IAAK,YACLE,MAAO,YACPD,QAAS,YACTiB,MAAO,MAKf,CACEnC,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,mBACPE,KAAM,CACJQ,YAAa,EACbC,SAAS,EACTC,cAAe,GACfC,gBAAiB,GACjBC,WAAY,CACV,CACEC,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,aAGXC,YAAa,CACX,CACEH,IAAK,EACLC,SAAS,EACTC,MAAO,aAGXE,WAAY,IAGhB,CACErB,MAAO,aACPM,UAAW,aACXL,KAAM,iBACNC,MAAO,sCACPC,YAAa,GACbC,KAAM,CACJkB,UAAW,EACXC,MAAO,CAAC,GAAI,GAAI,GAChBC,WAAY,CAAC,OAAQ,OAAQ,aAGjC,CACExB,MAAO,cACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,cACPC,YAAa,GACbC,KAAM,CACJuB,OAAQ,IACRC,UAAW,GACXC,gBAAiB,GACjBhB,SAAS,EACTiB,qBAAqB,EACrBC,sBAAsB,EACtBC,0BAA2B,SAC3BC,qBAAsB,kCAG1B,CACEjC,MAAO,cACPM,UAAW,cACXL,KAAM,mBACNC,MAAO,mBACPC,YACE,wLAEFC,KAAM,CACJkB,UAAW,IAGf,CACEtB,MAAO,cACPM,UAAW,cACXH,YACE,oYAKFF,KAAM,qBACNG,KAAM","file":"js/chunk-2d0e6c24.50e2e1bb.js","sourcesContent":["module.exports = [\n  {\n    index: 'pipeline_0',\n    type: 'DatasetLoader',\n    title: 'Dataset Loader',\n    description:\n      'This pipeline uses the iris dataset from UCI Machile Learning ' +\n      '[repository](https://archive.ics.uci.edu/ml/datasets/iris). It ' +\n      'uses **tensorflow** to create a model that exemplifies making an **autoencoder** to reduce ' +\n      'dimensions. These dimensions are then used to classify the flowers.',\n    data: {\n      remoteFile: 'https://raw.githubusercontent.com/pandas-dev/pandas/0.19.x/pandas/tests/data/iris.csv'\n    }\n  },\n  {\n    index: 'pipeline_1',\n    input_ref: 'pipeline_0',\n    type: 'DatasetTableViewer',\n    data: {\n      header: true,\n      xAxis: 0,\n      yAxis: 1,\n      zAxis: 2,\n      lAxis: 4\n    }\n  },\n  {\n    index: 'pipeline_2',\n    input_ref: 'pipeline_1',\n    type: 'DatasetSplitter',\n    title: 'Dataset Splitter',\n    data: {\n      sampleSplit: 1,\n      shuffle: false,\n      trainingRatio: 1,\n      evaluationRatio: 0,\n      inputUnits: [\n        {\n          key: 0,\n          checked: true,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: true,\n          label: 'Column 1'\n        },\n        {\n          key: 2,\n          checked: true,\n          label: 'Column 2'\n        },\n        {\n          key: 3,\n          checked: true,\n          label: 'Column 3'\n        }\n      ],\n      outputUnits: [\n        {\n          key: 0,\n          checked: true,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: true,\n          label: 'Column 1'\n        },\n        {\n          key: 2,\n          checked: true,\n          label: 'Column 2'\n        },\n        {\n          key: 3,\n          checked: true,\n          label: 'Column 3'\n        }\n      ],\n      indexLabel: 4\n    }\n  },\n  {\n    index: 'pipeline_3',\n    input_ref: 'pipeline_2',\n    type: 'TSModelBuilder',\n    title: 'Autoencoder Model',\n    description:\n      'In this model, the input shape of 4 will be **reduced** to 3, then it ' +\n      'will reshape the output back to 4.',\n    data: {\n      layerSize: 2,\n      units: [3, 4],\n      activation: ['relu', 'relu'],\n      kernelInitializer: ['randomNormal', 'randomNormal'],\n      biasInitializer: ['ones', 'ones']\n    }\n  },\n  {\n    index: 'pipeline_4',\n    input_ref: 'pipeline_3',\n    type: 'TSModelCompiler',\n    description:\n      'When **training** this autoencoder, the model *output* will try to fit its ' +\n      '*input*, while a *hidden* layer will reduce the feature dimensions from 4 to 3.',\n    data: {\n      epochs: 200,\n      batchSize: 32,\n      validationSplit: 0.1,\n      shuffle: true,\n      inputUnitsNormalize: false,\n      outputUnitsNormalize: false,\n      compilerOptimizerSelected: 'sgd',\n      compilerLossSelected: 'meanSquaredError'\n    }\n  },\n  {\n    index: 'pipeline_5',\n    input_ref: 'pipeline_4',\n    type: 'TSModelPredictor',\n    title: 'Prediction: Encoder/Decoder',\n    description:\n      'The prediction will use the hidden layer so output values will ' +\n      'have 3 feature dimensions encoding the total units of this layer. The last layer could be ' +\n      'used to predict back all the features, however we want to use the encoded features as inputs ' +\n      'for a different classifier for the labels. If you open the table chart you should be able to ' +\n      'identify **clusters** of the iris data.',\n    data: {\n      layerSize: 1\n    }\n  },\n  {\n    index: 'pipeline_6',\n    input_ref: 'pipeline_5',\n    type: 'DatasetTableViewer',\n    data: {\n      xAxis: 8,\n      yAxis: 9,\n      zAxis: 10,\n      lAxis: 11\n    }\n  },\n  {\n    index: 'pipeline_7',\n    input_ref: 'pipeline_6',\n    type: 'DatasetTableViewer',\n    data: {\n      xAxis: 0,\n      yAxis: 1,\n      zAxis: 2,\n      lAxis: 3,\n      columns: [\n        {\n          key: 'Column 0',\n          label: 'Column 0',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Column 1',\n          label: 'Column 1',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Column 2',\n          label: 'Column 2',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Column 3',\n          label: 'Column 3',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Column 4',\n          label: 'Column 4',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Column 5',\n          label: 'Column 5',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Column 6',\n          label: 'Column 6',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Column 7',\n          label: 'Column 7',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Column 8',\n          label: 'Column 8',\n          checked: 'Column 8',\n          state: 1\n        },\n        {\n          key: 'Column 9',\n          label: 'Column 9',\n          checked: 'Column 9',\n          state: 1\n        },\n        {\n          key: 'Column 10',\n          label: 'Column 10',\n          checked: 'Column 10',\n          state: 1\n        },\n        {\n          key: 'Column 11',\n          label: 'Column 11',\n          checked: 'Column 11',\n          state: 1\n        }\n      ]\n    }\n  },\n  {\n    index: 'pipeline_8',\n    input_ref: 'pipeline_7',\n    type: 'DatasetSplitter',\n    title: 'Dataset Splitter',\n    data: {\n      sampleSplit: 1,\n      shuffle: true,\n      trainingRatio: 0.7,\n      evaluationRatio: 0.3,\n      inputUnits: [\n        {\n          key: 0,\n          checked: true,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: true,\n          label: 'Column 1'\n        },\n        {\n          key: 2,\n          checked: true,\n          label: 'Column 2'\n        }\n      ],\n      outputUnits: [\n        {\n          key: 3,\n          checked: true,\n          label: 'Column 3'\n        }\n      ],\n      indexLabel: 3\n    }\n  },\n  {\n    index: 'pipeline_9',\n    input_ref: 'pipeline_8',\n    type: 'TSModelBuilder',\n    title: 'Create model to classify the flower',\n    description: '',\n    data: {\n      layerSize: 3,\n      units: [10, 10, 3],\n      activation: ['relu', 'relu', 'softmax']\n    }\n  },\n  {\n    index: 'pipeline_10',\n    input_ref: 'pipeline_9',\n    type: 'TSModelCompiler',\n    title: 'Train model',\n    description: '',\n    data: {\n      epochs: 200,\n      batchSize: 32,\n      validationSplit: 0.1,\n      shuffle: true,\n      inputUnitsNormalize: false,\n      outputUnitsNormalize: false,\n      compilerOptimizerSelected: 'adamax',\n      compilerLossSelected: 'sparseCategoricalCrossentropy'\n    }\n  },\n  {\n    index: 'pipeline_11',\n    input_ref: 'pipeline_10',\n    type: 'TSModelPredictor',\n    title: 'Make Predictions',\n    description:\n      'The predictions are run over the evaluation dataset, the class accuracy and confusion matrix ' +\n      'can be viewed to evaluate if the training model is preducting the categories as desired.',\n    data: {\n      layerSize: 3\n    }\n  },\n  {\n    index: 'pipeline_12',\n    input_ref: 'pipeline_11',\n    description:\n      'Notice columns 0, 1 and 2 used to classify the flowers are the encoded dimensions from ' +\n      'the autoencoder and not the original inputs from **pipeline 1**. However, to encode these ' +\n      'dimentions, the values from **pipeline 1** need to be encoded first, so this classification ' +\n      'requires **2** steps, reducing dimensions can be a good solution to avoid feeding a ' +\n      'classifier with too much inputs.',\n    type: 'DatasetTableViewer',\n    data: {}\n  }\n]\n"],"sourceRoot":""}