{"version":3,"sources":["webpack:///./src/templates/tensorflow-training-and-prediction.js"],"names":["module","exports","index","type","title","description","data","remoteFile","input_ref","header","xAxis","yAxis","zAxis","lAxis","sampleSplit","shuffle","trainingRatio","evaluationRatio","inputUnits","key","checked","label","outputUnits","indexLabel","layerSize","units","activation","epochs","batchSize","inputUnitsNormalize","outputUnitsNormalize","validationSplit","compilerOptimizerSelected","compilerLossSelected"],"mappings":"iGAAAA,EAAOC,QAAU,CACf,CACEC,MAAO,aACPC,KAAM,gBACNC,MAAO,0BACPC,YACE,sNAGFC,KAAM,CACJC,WACE,iIAGN,CACEL,MAAO,aACPM,UAAW,aACXL,KAAM,qBACNG,KAAM,CACJG,QAAQ,EACRC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,MAAO,IAGX,CACEX,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,mBACPC,YAAa,+CACbC,KAAM,CACJQ,YAAa,EACbC,SAAS,EACTC,cAAe,EACfC,gBAAiB,EACjBC,WAAY,CACV,CACEC,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,aAGXC,YAAa,CACX,CACEH,IAAK,EACLC,SAAS,EACTC,MAAO,aAGXE,WAAY,IAGhB,CACErB,MAAO,aACPC,KAAM,gBACNC,MAAO,sBACPE,KAAM,CACJC,WACE,6HAGN,CACEL,MAAO,aACPM,UAAW,aACXL,KAAM,qBACNG,KAAM,CACJG,QAAQ,EACRC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,MAAO,IAGX,CACEX,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,mBACPC,YAAa,0DACbC,KAAM,CACJQ,YAAa,EACbC,SAAS,EACTC,cAAe,EACfC,gBAAiB,EACjBC,WAAY,CACV,CACEC,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,YAET,CACEF,IAAK,EACLC,SAAS,EACTC,MAAO,aAGXC,YAAa,CACX,CACEH,IAAK,EACLC,SAAS,EACTC,MAAO,aAGXE,WAAY,IAGhB,CACErB,MAAO,aACPM,UAAW,aACXL,KAAM,iBACNC,MAAO,uCACPC,YAAa,GACbC,KAAM,CACJkB,UAAW,EACXC,MAAO,CAAC,IAAK,IAAK,IAAK,GACvBC,WAAY,CAAC,OAAQ,OAAQ,OAAQ,aAGzC,CACExB,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,cACPC,YACE,yOAGFC,KAAM,CACJqB,OAAQ,GACRC,UAAW,IACXb,SAAS,EACTc,qBAAqB,EACrBC,sBAAsB,EACtBC,gBAAiB,IACjBC,0BAA2B,SAC3BC,qBAAsB,kCAG1B,CACE/B,MAAO,aACPM,UAAW,aACXL,KAAM,mBACNC,MAAO,mBACPC,YACE,wLAEFC,KAAM,CACJkB,UAAW,IAGf,CACEtB,MAAO,aACPM,UAAW,aACXL,KAAM,qBACNG,KAAM","file":"js/chunk-2d22b91f.5dd38975.js","sourcesContent":["module.exports = [\n  {\n    index: 'pipeline_0',\n    type: 'DatasetLoader',\n    title: 'Setup the training data',\n    description:\n      'This pipeline is based on the tutorial from tensorflow about ' +\n      '[training and prediction](https://www.tensorflow.org/js/tutorials/training/nodejs_training) ' +\n      'of baseball pitch types from pitch sensor data from MLBAM.',\n    data: {\n      remoteFile:\n        'https://raw.githubusercontent.com/Stocastico/learn-tensorflow-js/master/pitch_classifier_nodejs/pitch_type_training_data.csv'\n    }\n  },\n  {\n    index: 'pipeline_1',\n    input_ref: 'pipeline_0',\n    type: 'DatasetTableViewer',\n    data: {\n      header: true,\n      xAxis: 0,\n      yAxis: 1,\n      zAxis: 2,\n      lAxis: 8\n    }\n  },\n  {\n    index: 'pipeline_2',\n    input_ref: 'pipeline_1',\n    type: 'DatasetSplitter',\n    title: 'Dataset Splitter',\n    description: 'The first dataset is 100% used for training.',\n    data: {\n      sampleSplit: 1,\n      shuffle: true,\n      trainingRatio: 1,\n      evaluationRatio: 0,\n      inputUnits: [\n        {\n          key: 0,\n          checked: true,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: true,\n          label: 'Column 1'\n        },\n        {\n          key: 2,\n          checked: true,\n          label: 'Column 2'\n        },\n        {\n          key: 3,\n          checked: true,\n          label: 'Column 3'\n        },\n        {\n          key: 4,\n          checked: true,\n          label: 'Column 4'\n        },\n        {\n          key: 5,\n          checked: true,\n          label: 'Column 5'\n        },\n        {\n          key: 6,\n          checked: true,\n          label: 'Column 6'\n        },\n        {\n          key: 7,\n          checked: true,\n          label: 'Column 7'\n        }\n      ],\n      outputUnits: [\n        {\n          key: 8,\n          checked: true,\n          label: 'Column 8'\n        }\n      ],\n      indexLabel: 8\n    }\n  },\n  {\n    index: 'pipeline_3',\n    type: 'DatasetLoader',\n    title: 'Setup the test data',\n    data: {\n      remoteFile:\n        'https://raw.githubusercontent.com/Stocastico/learn-tensorflow-js/master/pitch_classifier_nodejs/pitch_type_test_data.csv'\n    }\n  },\n  {\n    index: 'pipeline_4',\n    input_ref: 'pipeline_3',\n    type: 'DatasetTableViewer',\n    data: {\n      header: true,\n      xAxis: 0,\n      yAxis: 1,\n      zAxis: 2,\n      lAxis: 8\n    }\n  },\n  {\n    index: 'pipeline_5',\n    input_ref: 'pipeline_4',\n    type: 'DatasetSplitter',\n    title: 'Dataset Splitter',\n    description: 'The second dataset is 100% used for testing evaluation.',\n    data: {\n      sampleSplit: 1,\n      shuffle: false,\n      trainingRatio: 0,\n      evaluationRatio: 1,\n      inputUnits: [\n        {\n          key: 0,\n          checked: true,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: true,\n          label: 'Column 1'\n        },\n        {\n          key: 2,\n          checked: true,\n          label: 'Column 2'\n        },\n        {\n          key: 3,\n          checked: true,\n          label: 'Column 3'\n        },\n        {\n          key: 4,\n          checked: true,\n          label: 'Column 4'\n        },\n        {\n          key: 5,\n          checked: true,\n          label: 'Column 5'\n        },\n        {\n          key: 6,\n          checked: true,\n          label: 'Column 6'\n        },\n        {\n          key: 7,\n          checked: true,\n          label: 'Column 7'\n        }\n      ],\n      outputUnits: [\n        {\n          key: 8,\n          checked: true,\n          label: 'Column 8'\n        }\n      ],\n      indexLabel: 8\n    }\n  },\n  {\n    index: 'pipeline_6',\n    input_ref: 'pipeline_5',\n    type: 'TSModelBuilder',\n    title: 'Create model to classify pitch types',\n    description: '',\n    data: {\n      layerSize: 4,\n      units: [250, 175, 150, 7],\n      activation: ['relu', 'relu', 'relu', 'softmax']\n    }\n  },\n  {\n    index: 'pipeline_7',\n    input_ref: 'pipeline_6',\n    type: 'TSModelCompiler',\n    title: 'Train model',\n    description:\n      'The training loss is a sparse categorical cross entropy, so there is no need to split ' +\n      \"the categories of the output into an array of 0's and 1's. Inputs are normalized and the \" +\n      'output is the category itself, so it is not normalized.',\n    data: {\n      epochs: 50,\n      batchSize: 700,\n      shuffle: true,\n      inputUnitsNormalize: true,\n      outputUnitsNormalize: false,\n      validationSplit: 0.15,\n      compilerOptimizerSelected: 'adamax',\n      compilerLossSelected: 'sparseCategoricalCrossentropy'\n    }\n  },\n  {\n    index: 'pipeline_8',\n    input_ref: 'pipeline_7',\n    type: 'TSModelPredictor',\n    title: 'Make Predictions',\n    description:\n      'The predictions are run over the evaluation dataset, the class accuracy and confusion matrix ' +\n      'can be viewed to evaluate if the training model is preducting the categories as desired.',\n    data: {\n      layerSize: 4\n    }\n  },\n  {\n    index: 'pipeline_9',\n    input_ref: 'pipeline_8',\n    type: 'DatasetTableViewer',\n    data: {}\n  }\n]\n"],"sourceRoot":""}