{"version":3,"sources":["webpack:///./src/templates/tensorflow-handwritten-digit-cnn.js"],"names":["module","exports","index","type","title","description","data","remoteFile","input_ref","spriteWidth","spriteHeight","labelSize","output_ref","layerSize","layerName","units","kernelSize","filters","strides","poolSize","activation","kernelInitializer","biasInitializer","epochSize","batchSize","shuffle","validationSplit","compilerOptimizerSelected","compilerLossSelected"],"mappings":"mGAAAA,EAAOC,QAAU,CACf,CACEC,MAAO,aACPC,KAAM,gBACNC,MAAO,iBACPC,YACE,mRAGFC,KAAM,CACJC,WAAY,+EAGhB,CACEL,MAAO,aACPM,UAAW,aACXH,YAAa,8EACbF,KAAM,sBACNG,KAAM,CACJG,YAAa,GACbC,aAAc,KAGlB,CACER,MAAO,aACPC,KAAM,gBACNE,YACE,mgBAMFC,KAAM,CACJC,WAAY,iFAGhB,CACEL,MAAO,aACPM,UAAW,aACXH,YACE,yLAEFF,KAAM,eACNG,KAAM,CACJK,UAAW,GACXC,WAAY,eAGhB,CACEV,MAAO,aACPC,KAAM,UACNC,MAAO,gCACPC,YACE,+IAEFG,UAAW,aACXF,KAAM,CACJO,UAAW,EACXC,UAAW,CAAC,SAAU,eAAgB,SAAU,eAAgB,UAAW,SAC3EC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IACvBC,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5BC,QAAS,CAAC,GAAI,EAAG,IAAK,GAAI,EAAG,IAC7BC,QAAS,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,IACxCC,SAAU,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,CAAC,EAAG,GAAI,GAAI,IACvCC,WAAY,CAAC,OAAQ,KAAM,OAAQ,KAAM,KAAM,WAC/CC,kBAAmB,CAAC,kBAAmB,KAAM,kBAAmB,KAAM,KAAM,mBAC5EC,gBAAiB,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,WAGnE,CACEpB,MAAO,aACPC,KAAM,kBACNC,MAAO,kBACPC,YACE,gdAMFG,UAAW,aACXF,KAAM,CACJiB,UAAW,GACXC,UAAW,IACXC,SAAS,EACTC,gBAAiB,IACjBC,0BAA2B,SAC3BC,qBAAsB","file":"js/chunk-2d0c4dca.9c912e7b.js","sourcesContent":["module.exports = [\n  {\n    index: 'pipeline_0',\n    type: 'DatasetLoader',\n    title: 'Dataset Loader',\n    description:\n      'This pipeline is based on the tutorial from tensorflow about [convolutional neural network]' +\n      '(https://www.tensorflow.org/js/tutorials/training/handwritten_digit_cnn). The datas source' +\n      'below is a **PNG** image of **1** channel (greyscale) with the size of **784** x **65000**.',\n    data: {\n      remoteFile: 'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png'\n    }\n  },\n  {\n    index: 'pipeline_1',\n    input_ref: 'pipeline_0',\n    description: 'The image contains **65000** digits, each with the size of **28** x **28**.',\n    type: 'DatasetSpriteViewer',\n    data: {\n      spriteWidth: 28,\n      spriteHeight: 28\n    }\n  },\n  {\n    index: 'pipeline_2',\n    type: 'DatasetLoader',\n    description:\n      'The next datasource is the **labels** and they are represented as an array of **10** zeroes or ' +\n      'ones. In the array, if the digit is a zero, then the first number in the array will be one, if ' +\n      \"its a one, then the second number will be a one and so on... It's like turning on and off the \" +\n      'numbers of the array, so the **neural network** should be able to turn one of its **10** ' +\n      'outputs (as its a classifier) to represent a digit. There are 65000 **groups** of 10 numbers ' +\n      'describing the digits in the image from above.',\n    data: {\n      remoteFile: 'https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8'\n    }\n  },\n  {\n    index: 'pipeline_3',\n    input_ref: 'pipeline_2',\n    description:\n      'We define **10** numbers to represent a **label** (as there are 10 possible digits), and then ' +\n      'we **reference** the output of pipeline 1, so it will have this information added to it.',\n    type: 'DatasetLabel',\n    data: {\n      labelSize: 10,\n      output_ref: 'pipeline_1'\n    }\n  },\n  {\n    index: 'pipeline_4',\n    type: 'TSModel',\n    title: 'Define the model architecture',\n    description:\n      \"This is how the neural network is defined, it's important to have the last layer with **10**, \" +\n      'units as each unit will categorize the digits.',\n    input_ref: 'pipeline_1',\n    data: {\n      layerSize: 6,\n      layerName: ['conv2d', 'maxPooling2d', 'conv2d', 'maxPooling2d', 'flatten', 'dense'],\n      units: [0, 0, 0, 0, 0, 10],\n      kernelSize: [5, 0, 5, 0, 0, 0],\n      filters: [8, -1, 16, -1, -1, 10],\n      strides: [[1], [2, 2], [1], [2, 2], [], []],\n      poolSize: [[], [2, 2], [], [2, 2], [], []],\n      activation: ['relu', '--', 'relu', '--', '--', 'softmax'],\n      kernelInitializer: ['varianceScaling', '--', 'varianceScaling', '--', '--', 'varianceScaling'],\n      biasInitializer: ['zeros', 'zeros', 'zeros', 'zeros', 'zeros', 'zeros']\n    }\n  },\n  {\n    index: 'pipeline_5',\n    type: 'TSModelCompiler',\n    title: 'Train the Model',\n    description:\n      'When training, we are using **all** the 65000 digits loaded, and using 16% of those as ' +\n      '**validation** to prevent overfitting. So the training size will be 54600 and the validation ' +\n      'size will be 10400 digits. **Shuffling** is turned on, as most of the digits are ordered in ' +\n      'sequence and have the same handwriting. It takes a **long** time to train, this example ' +\n      'should have tensorflow running in a backend as running entirely in the browser can be ' +\n      'quite **slow**.',\n    input_ref: 'pipeline_4',\n    data: {\n      epochSize: 10,\n      batchSize: 512,\n      shuffle: true,\n      validationSplit: 0.16,\n      compilerOptimizerSelected: 'adamax',\n      compilerLossSelected: 'categoricalCrossentropy'\n    }\n  }\n]\n"],"sourceRoot":""}