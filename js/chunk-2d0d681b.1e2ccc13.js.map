{"version":3,"sources":["webpack:///./src/templates/tensorflow-predictions-more-2d.js"],"names":["module","exports","index","type","title","description","data","remoteFile","input_ref","xAxis","yAxis","headers","key","label","checked","state","sampleSplit","shuffle","trainingRatio","evaluationRatio","inputUnits","outputUnits","layerSize","units","activation","kernelInitializer","biasInitializer","epochSize","batchSize","validationSplit","inputUnitsNormalize","outputUnitsNormalize","compilerOptimizerSelected","compilerLossSelected"],"mappings":"mGAAAA,EAAOC,QAAU,CACf,CACEC,MAAO,aACPC,KAAM,gBACNC,MAAO,4CACPC,YACE,yLAGFC,KAAM,CACJC,WAAY,gEAGhB,CACEL,MAAO,aACPM,UAAW,aACXL,KAAM,qBACNG,KAAM,CACJG,MAAO,EACPC,MAAO,EACPC,QAAS,CACP,CACEC,IAAK,OACLC,MAAO,OACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,mBACLC,MAAO,mBACPC,QAAS,mBACTC,MAAO,GAET,CACEH,IAAK,YACLC,MAAO,YACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,eACLC,MAAO,eACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,aACLC,MAAO,aACPC,QAAS,aACTC,MAAO,GAET,CACEH,IAAK,gBACLC,MAAO,gBACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,eACLC,MAAO,eACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,OACLC,MAAO,OACPC,SAAS,EACTC,MAAO,GAET,CACEH,IAAK,SACLC,MAAO,SACPC,SAAS,EACTC,MAAO,MAKf,CACEb,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,mBACPE,KAAM,CACJU,YAAa,EACbC,SAAS,EACTC,cAAe,EACfC,gBAAiB,EACjBC,WAAY,CACV,CACER,IAAK,EACLE,SAAS,EACTD,MAAO,YAET,CACED,IAAK,EACLE,SAAS,EACTD,MAAO,aAGXQ,YAAa,CACX,CACET,IAAK,EACLE,SAAS,EACTD,MAAO,YAET,CACED,IAAK,EACLE,SAAS,EACTD,MAAO,eAKf,CACEX,MAAO,aACPM,UAAW,aACXL,KAAM,iBACNC,MAAO,gCACPE,KAAM,CACJgB,UAAW,EACXC,MAAO,CAAC,GAAI,GAAI,GAChBC,WAAY,CAAC,SAAU,SAAU,WACjCC,kBAAmB,CAAC,KAAM,KAAM,MAChCC,gBAAiB,CAAC,QAAS,QAAS,WAGxC,CACExB,MAAO,aACPM,UAAW,aACXL,KAAM,kBACNC,MAAO,kBACPC,YACE,sRAIFC,KAAM,CACJqB,UAAW,GACXC,UAAW,GACXC,gBAAiB,GACjBZ,SAAS,EACTa,qBAAqB,EACrBC,sBAAsB,EACtBC,0BAA2B,SAC3BC,qBAAsB,qBAG1B,CACE/B,MAAO,aACPM,UAAW,aACXL,KAAM,mBACNC,MAAO,mBACPE,KAAM,CACJgB,UAAW,IAGf,CACEpB,MAAO,aACPM,UAAW,aACXL,KAAM,qBACNG,KAAM,CACJG,MAAO,EACPC,MAAO","file":"js/chunk-2d0d681b.1e2ccc13.js","sourcesContent":["module.exports = [\n  {\n    index: 'pipeline_0',\n    type: 'DatasetLoader',\n    title: 'Load, format and visualize the input data',\n    description:\n      'This pipeline is based on the tutorial from tensorflow about ' +\n      '[linear regression](https://www.tensorflow.org/js/tutorials/training/linear_regression), ' +\n      'with an additional hidden layer.',\n    data: {\n      remoteFile: 'https://storage.googleapis.com/tfjs-tutorials/carsData.json'\n    }\n  },\n  {\n    index: 'pipeline_1',\n    input_ref: 'pipeline_0',\n    type: 'DatasetTableViewer',\n    data: {\n      xAxis: 1,\n      yAxis: 0,\n      headers: [\n        {\n          key: 'Name',\n          label: 'Name',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Miles_per_Gallon',\n          label: 'Miles per Gallon',\n          checked: 'Miles_per_Gallon',\n          state: 1\n        },\n        {\n          key: 'Cylinders',\n          label: 'Cylinders',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Displacement',\n          label: 'Displacement',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Horsepower',\n          label: 'Horsepower',\n          checked: 'Horsepower',\n          state: 1\n        },\n        {\n          key: 'Weight_in_lbs',\n          label: 'Weight in lbs',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Acceleration',\n          label: 'Acceleration',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Year',\n          label: 'Year',\n          checked: false,\n          state: 0\n        },\n        {\n          key: 'Origin',\n          label: 'Origin',\n          checked: false,\n          state: 0\n        }\n      ]\n    }\n  },\n  {\n    index: 'pipeline_2',\n    input_ref: 'pipeline_1',\n    type: 'DatasetSplitter',\n    title: 'Dataset Splitter',\n    data: {\n      sampleSplit: 1,\n      shuffle: true,\n      trainingRatio: 1,\n      evaluationRatio: 0,\n      inputUnits: [\n        {\n          key: 0,\n          checked: false,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: true,\n          label: 'Column 1'\n        }\n      ],\n      outputUnits: [\n        {\n          key: 0,\n          checked: true,\n          label: 'Column 0'\n        },\n        {\n          key: 1,\n          checked: false,\n          label: 'Column 1'\n        }\n      ]\n    }\n  },\n  {\n    index: 'pipeline_3',\n    input_ref: 'pipeline_2',\n    type: 'TSModelBuilder',\n    title: 'Define the model architecture',\n    data: {\n      layerSize: 3,\n      units: [20, 15, 1],\n      activation: ['linear', 'linear', 'sigmoid'],\n      kernelInitializer: ['--', '--', '--'],\n      biasInitializer: ['zeros', 'zeros', 'zeros']\n    }\n  },\n  {\n    index: 'pipeline_4',\n    input_ref: 'pipeline_3',\n    type: 'TSModelCompiler',\n    title: 'Train the model',\n    description:\n      'If the loss value is still **too high** you can re-train the model. It will not ' +\n      'reset the previous training, but resume it with additional epochs. This helps if ' +\n      'the selected training model was good, but the epochs for the training was too low. Just be ' +\n      'careful not to overfit.',\n    data: {\n      epochSize: 30,\n      batchSize: 32,\n      validationSplit: 0.1,\n      shuffle: true,\n      inputUnitsNormalize: true,\n      outputUnitsNormalize: true,\n      compilerOptimizerSelected: 'adamax',\n      compilerLossSelected: 'meanSquaredError'\n    }\n  },\n  {\n    index: 'pipeline_5',\n    input_ref: 'pipeline_4',\n    type: 'TSModelPredictor',\n    title: 'Make Predictions',\n    data: {\n      layerSize: 3\n    }\n  },\n  {\n    index: 'pipeline_6',\n    input_ref: 'pipeline_5',\n    type: 'DatasetTableViewer',\n    data: {\n      xAxis: 0,\n      yAxis: 2\n    }\n  }\n]\n"],"sourceRoot":""}